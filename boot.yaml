# Все настройки: https://github.com/rookie-ninja/rk-grpc?tab=readme-ov-file#full-yaml
app: # Инфрпмация о приложении (нужна для meta и logging)
  name: example
  version: "v0.1.0"
  description: "my description"
  # keywords: ["rk", "golang"]
  # homeUrl: "http://example.com"
  # docsUrl: ["http://example.com"]
  # maintainers: ["rk-dev"]
logger: # logging with [rk-logger](https://github.com/rookie-ninja/rk-logger)
  - name: zap
    description: "ZAP"
    domain: "*"
    default: true
    zap:
      level: debug
      development: true
      disableCaller: false
      disableStacktrace: true
      encoding: json # console, json, flatten
      outputPaths: ["stdout"]
      errorOutputPaths: ["stderr"]
      encoderConfig:
        timeKey: "ts"
        levelKey: "level"
        nameKey: "logger"
        callerKey: "caller"
        messageKey: "msg"
        stacktraceKey: "stacktrace"
        skipLineEnding: false
        lineEnding: "\n"
        consoleSeparator: "\t"
      sampling: # Optional, default: nil
        initial: 0
        thereafter: 0
      initialFields:
        service: example
event: # logging of RPC with [rk-query](https://github.com/rookie-ninja/rk-query)
  - name: event
    description: "event entry"
    domain: "*"
    encoding: json # console, json, flatten
    default: true
    outputPaths: ["stdout"]
#    lumberjack:                                           # Optional, default: nil
#      filename:
#      maxsize: 1024                                       # Optional, suggested: 1024 (MB)
#      maxage: 7                                           # Optional, suggested: 7 (day)
#      maxbackups: 3                                       # Optional, suggested: 3 (day)
#      localtime: true                                     # Optional, suggested: true
#      compress: true                                      # Optional, suggested: true
#    loki:
#      enabled: true                                       # Optional, default: false
#      addr: localhost:3100                                # Optional, default: localhost:3100
#      path: /loki/api/v1/push                             # Optional, default: /loki/api/v1/push
#      username: ""                                        # Optional, default: ""
#      password: ""                                        # Optional, default: ""
#      maxBatchWaitMs: 3000                                # Optional, default: 3000
#      maxBatchSize: 1000                                  # Optional, default: 1000
#      insecureSkipVerify: false                           # Optional, default: false
#      labels:                                             # Optional, default: empty map
#        my_label_key: my_label_value
# cert: # TLS/SSL
#   - name: my-cert
#     description: "Description of entry"
#     domain: "*"
#     caPath: "certs/ca.pem"
#     certPemPath: "certs/server-cert.pem"
#     keyPemPath: "certs/server-key.pem"
config: # https://github.com/spf13/viper
  - name: config
    description: "Description of entry"
    domain: "*"
    # path: "config/config.yaml"
    envPrefix: ""
    content:
      key: value
      key1: value1
      key2: value2
grpc:
  - name: example # Название нашего entry
    description: "example server"
    enabled: true # Можем отключить entry при необходимости (мало ли ...)

    # certEntry: my-cert
    loggerEntry: zap
    eventEntry: event

    ##########################
    # gRPC настройки
    ##########################

    port: 82 # Порт на котором будем принимать входящие gRPC запросы
    enableReflection: true # Включить gRPC reflection (в основном нужно для grpcurl, grpcli, postman)

    ##########################
    # gRPC-Gateway настройки
    ##########################

    gwPort: 80 # Порт на котором будем принимать входящие HTTP запросы в gRPC-Gateway
    gwOption: # Настройки опций gRPC-Gateway
      marshal: # https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson#MarshalOptions
        multiline: false
        emitUnpopulated: true
        indent: ""
        allowPartial: false
        useProtoNames: false
        useEnumNumbers: false
      unmarshal: # https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson#UnmarshalOptions
        allowPartial: false
        discardUnknown: true

    ##########################
    # Документация API
    ##########################

    commonService: # Swagger UI клиент для RK сервиса
      enabled: true
    # grpcWeb: # gRPC-web клиент: https://github.com/grpc/grpc-web
    #   enabled: true
    #   cors:
    #     allowOrigins: ["*"]
    #   websocket:
    #     enabled: true
    #     pingIntervalMs: 10
    #     messageReadLimitBytes: 32769
    sw: # Swagger UI клиент: https://github.com/swagger-api/swagger-ui
      enabled: true
      path: "swagger"
      jsonPaths:
        - swagger
        - docs
      headers: []
    docs: # Встроенный экземпляр RapiDoc https://github.com/rapi-doc/RapiDoc, который можно использовать вместо Swagger
      enabled: true
      path: "docs"
      specPath: "swagger"
      headers: []
      style:
        theme: "light"
      debug: true

    ##########################
    # Observability
    ##########################

    prom: # Prometheus client will automatically register into grpc-gateway instance at /metrics.
      enabled: true
    pprof: # Профилирование
      enabled: true
      path: "/pprof"
    middleware:
      prom: # Метрики
        enabled: true
      logging: # Логирование RPC запросов https://github.com/rookie-ninja/rk-query
        enabled: true
        ignore: [""]
        loggerEncoding: "json" # console, json, flatten
        loggerOutputPaths: ["stdout"]
        eventEncoding: "json" # console, json, flatten
        eventOutputPaths: ["stdout"]
      trace: # Трейсинг
        enabled: true
        ignore: [""]
        exporter:
          file:
            enabled: true
            outputPath: "logs/trace.log"
          jaeger:
            agent:
              enabled: false
              host: "localhost"
              port: 6831
            collector:
              enabled: false
              endpoint: "http://localhost:14268/api/traces"
              username: ""
              password: ""
      meta: # Send micsroservice metadata as header to client.
        enabled: true

      ##########################
      # Отазоустойчивость
      ##########################

      timeout:
        enabled: true
        ignore: [""] # black list
        timeoutMs: 5000
        paths:
          - path: "/api.example.v1.ExampleService/CreateNote"
            timeoutMs: 1000
      rateLimit:
        enabled: true
        ignore: [""] # black list
        algorithm: "leakyBucket"
        reqPerSec: 1000
        paths:
          - path: "/api.example.v1.ExampleService/CreateNote"
            reqPerSec: 1

        ##########################
        # Безопасность
        ##########################
        # auth: # Support [Basic Auth] and [API Key] authorization types.
        #   enabled: true # Optional, default: false
        #   ignore: [""] # Optional, default: []
        #   basic:
        #     - "user:pass" # Optional, default: []
        #   apiKey:
        #     - "keys" # Optional, default: []
        # jwt: # Server side JWT validation.
        #   enabled: true # Optional, default: false
        #   ignore: [""] # Optional, default: []
        #   signerEntry: "" # Optional, default: ""
        #   skipVerify: false # Optional, default: false
        #   symmetric: # Optional
        #     algorithm: "" # Required, default: ""
        #     token: "" # Optional, default: ""
        #     tokenPath: "" # Optional, default: ""
        #   asymmetric: # Optional
        #     algorithm: "" # Required, default: ""
        #     privateKey: "" # Optional, default: ""
        #     privateKeyPath: "" # Optional, default: ""
        #     publicKey: "" # Optional, default: ""
        #     publicKeyPath: "" # Optional, default: ""
        #   tokenLookup: "header:<name>" # Optional, default: "header:Authorization"
        #   authScheme: "Bearer" # Optional, default: "Bearer"
        # secure:
        #   enabled: true # Optional, default: false
        #   ignore: [""] # Optional, default: []
        #   xssProtection: "" # Optional, default: "1; mode=block"
        #   contentTypeNosniff: "" # Optional, default: nosniff
        #   xFrameOptions: "" # Optional, default: SAMEORIGIN
        #   hstsMaxAge: 0 # Optional, default: 0
        #   hstsExcludeSubdomains: false # Optional, default: false
        #   hstsPreloadEnabled: false # Optional, default: false
        #   contentSecurityPolicy: "" # Optional, default: ""
        #   cspReportOnly: false # Optional, default: false
        #   referrerPolicy: "" # Optional, default: ""
        # csrf: # Server side CORS validation.
        #   enabled: true # Optional, default: false
        #   ignore: [""] # Optional, default: []
        #   tokenLength: 32 # Optional, default: 32
        #   tokenLookup: "header:X-CSRF-Token" # Optional, default: "header:X-CSRF-Token"
        #   cookieName: "_csrf" # Optional, default: _csrf
        #   cookieDomain: "" # Optional, default: ""
        #   cookiePath: "" # Optional, default: ""
        #   cookieMaxAge: 86400 # Optional, default: 86400
        #   cookieHttpOnly: false # Optional, default: false
        #   cookieSameSite: "default" # Optional, default: "default", options: lax, strict, none, default
        # cors:
        #   enabled: true # Optional, default: false
        #   ignore: [""] # Optional, default: []
        #   allowOrigins: # Optional, default: []
        #     - "http://localhost:*" # Optional, default: *
        #   allowCredentials: false # Optional, default: false
        #   allowHeaders: [] # Optional, default: []
        #   allowMethods: [] # Optional, default: []
        #   exposeHeaders: [] # Optional, default: []
        #   maxAge: 0 # Optional, default: 0
        # gzip:
        #   enabled: true # Optional, default: false
        #   ignore: [""] # Optional, default: []
        #   level: bestSpeed # Optional, options: [noCompression, bestSpeed， bestCompression, defaultCompression, huffmanOnly]
